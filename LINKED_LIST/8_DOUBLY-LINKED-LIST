/* A Doubly linked list is a bidirectional linked list;
i.e., you can traverse it from head to tail node or tail to head node.
Unlike singly-linked lists, its node has an extra pointer that points at the last node */

import java.util.Scanner;

class DoublyLinkedList{
    Node head=null;
    Node temp=null;
    class Node{
        int data;
        Node next;
        Node prev;
        Node(int data){
            this.data=data;
            this.next=null;
            this.prev=null;
        }
    }
    public void create(int n){
        Node nn=new Node(n);
        if(head==null){
            head=nn;
            temp=nn;
        }
        else{
            temp.next=nn;
            nn.prev=head;
            temp=nn;
        }
    }
    public void display(){
        Node t=head;
        while(t!=null){
            System.out.print(t.data+" ");
            t=t.next;
        }
    }
}
public class SLL_8 {
    public static void main(String[] args) {
        DoublyLinkedList o=new DoublyLinkedList();
        Scanner in=new Scanner(System.in);
        while(true){
            int n=in.nextInt();
            if(n<0)
                break;
            else
                o.create(n);
        }
        System.out.print("LIST OF ELEMENTS : ");
        o.display();
    }
}
